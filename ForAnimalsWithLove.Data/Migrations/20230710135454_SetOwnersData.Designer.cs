// <auto-generated />
using System;
using ForAnimalsWithLove.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForAnimalsWithLove.Data.Migrations
{
    [DbContext(typeof(ForAnimalsWithLoveDbContext))]
    [Migration("20230710135454_SetOwnersData")]
    partial class SetOwnersData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("DoesHasOwner")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GroomingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KindOfAnimal")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SearchHomeId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.AnimalBooking", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("AnimalsBookings");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.AnimalDoctor", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("AnimalsDoctors");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.AnimalEducation", b =>
                {
                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnimalId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("AnimalsEducations");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.DirectionDoctor", b =>
                {
                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DirectionId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DirectionsDoctors");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<Guid>("TrainerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Grooming", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.ToTable("Groomings");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.HealthRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnnualVaccine")
                        .HasColumnType("bit");

                    b.Property<bool>("FirstVaccine")
                        .HasColumnType("bit");

                    b.Property<string>("GeneralCondition")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("HospitalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastReview")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Microchip")
                        .HasColumnType("bit");

                    b.Property<string>("MicrochipNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PrescribedTreatment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("SecondVaccine")
                        .HasColumnType("bit");

                    b.Property<bool>("ThirdVaccine")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpcomingReview")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.HospitalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateOfAcceptance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfDischarge")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("HealthRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrescribedTreatment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId")
                        .IsUnique();

                    b.ToTable("HospitalRecords");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("AmountPerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 10, 13, 54, 53, 791, DateTimeKind.Utc).AddTicks(119));

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HospitalRecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperationReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalRecordId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96cf5fa4-b230-4c7a-802f-dea17a7a229c"),
                            Address = "София",
                            FirstName = "Марин",
                            LastName = "Велев",
                            PhoneNumber = "098977283"
                        },
                        new
                        {
                            Id = new Guid("d0381673-62b4-4298-b47d-a489e1cd12c0"),
                            Address = "Ихтиман",
                            FirstName = "Марияна",
                            LastName = "Иванова",
                            MiddleName = "Георгиева",
                            PhoneNumber = "0834772389"
                        },
                        new
                        {
                            Id = new Guid("abe0f2e6-17f3-428d-b7ea-cc3ef2b855cd"),
                            Address = "Елин Пелин",
                            FirstName = "Стефан",
                            LastName = "Петров",
                            MiddleName = "Петров",
                            PhoneNumber = "0989775680"
                        },
                        new
                        {
                            Id = new Guid("82853a05-7f15-4636-86a2-8c08cd400baf"),
                            Address = "София",
                            FirstName = "Мария",
                            LastName = "Петрова",
                            PhoneNumber = "0884788900"
                        },
                        new
                        {
                            Id = new Guid("840ea3f5-6147-4535-a2e9-5a2d696a56d5"),
                            Address = "София",
                            FirstName = "Валентина",
                            LastName = "Дюрова",
                            PhoneNumber = "0885666218"
                        },
                        new
                        {
                            Id = new Guid("f4c4a26e-3dab-4bd7-9ab7-f5aafc78b0fb"),
                            Address = "София",
                            FirstName = "Станимир",
                            LastName = "Хаджиев",
                            PhoneNumber = "0898322211"
                        },
                        new
                        {
                            Id = new Guid("647f35a8-87e5-455b-a233-30e835e70aa2"),
                            Address = "София",
                            FirstName = "Иван",
                            LastName = "Валентинов",
                            PhoneNumber = "0886755349"
                        },
                        new
                        {
                            Id = new Guid("61d265a4-4a0a-4d49-b6df-2a68f9a6dde7"),
                            Address = "Дупница",
                            FirstName = "Мария",
                            LastName = "Кръстева",
                            PhoneNumber = "0887334785"
                        },
                        new
                        {
                            Id = new Guid("d4e17efd-c288-4535-99f7-3dce589e7602"),
                            Address = "Дупница",
                            FirstName = "Галина",
                            LastName = "Кръстева",
                            MiddleName = "Недева",
                            PhoneNumber = "0878611282"
                        },
                        new
                        {
                            Id = new Guid("c3356b8f-8570-428b-8e79-0a09975d947d"),
                            Address = "Велико Търново",
                            FirstName = "Полина",
                            LastName = "Друмева",
                            PhoneNumber = "0878644619"
                        },
                        new
                        {
                            Id = new Guid("5a59a1c0-dc04-4af1-84d5-f9fe623c6068"),
                            Address = "София",
                            FirstName = "Симона",
                            LastName = "Иванова",
                            PhoneNumber = "0885565213"
                        },
                        new
                        {
                            Id = new Guid("7867b0c8-a1c7-41bc-b783-764336b04ed6"),
                            Address = "София",
                            FirstName = "Йоанна",
                            LastName = "Здравкова",
                            PhoneNumber = "0888672662"
                        },
                        new
                        {
                            Id = new Guid("a69e4ee8-70be-487c-bc89-a539265aa4c0"),
                            Address = "София",
                            FirstName = "Магдалена",
                            LastName = "Иванова",
                            PhoneNumber = "0887721356"
                        },
                        new
                        {
                            Id = new Guid("75378afe-3b3a-4a31-ab4e-5bc9671cdc28"),
                            Address = "Тетевен",
                            FirstName = "Ивета",
                            LastName = "Манолова",
                            PhoneNumber = "072826786"
                        },
                        new
                        {
                            Id = new Guid("fa4970ab-2221-404a-9afb-a976d210dcbb"),
                            Address = "София",
                            FirstName = "Красимир",
                            LastName = "Иванов",
                            MiddleName = "Недялков",
                            PhoneNumber = "0898268776"
                        },
                        new
                        {
                            Id = new Guid("3cfb5f9a-d5aa-4949-8037-a1956061430f"),
                            Address = "София",
                            FirstName = "Росица",
                            LastName = "Маринова",
                            PhoneNumber = "0878221112"
                        },
                        new
                        {
                            Id = new Guid("251cff84-1067-447f-88e1-071fd802ed16"),
                            Address = "Самоков",
                            FirstName = "Деница",
                            LastName = "Иванова",
                            MiddleName = "Иванова",
                            PhoneNumber = "0898217888"
                        });
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.SearchHome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Habits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId")
                        .IsUnique();

                    b.ToTable("SearchHomes");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagingDiagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PKK")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Animal", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Owner", "Owner")
                        .WithMany("MyAnimals")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.AnimalBooking", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForAnimalsWithLove.Data.Models.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.AnimalDoctor", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForAnimalsWithLove.Data.Models.Doctor", "Doctor")
                        .WithMany("AnimalsDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.AnimalEducation", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForAnimalsWithLove.Data.Models.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Booking", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.DirectionDoctor", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Direction", "Direction")
                        .WithMany("DirectionsDoctors")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForAnimalsWithLove.Data.Models.Doctor", "Doctor")
                        .WithMany("DirectionsDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Direction");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Education", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Trainer", "Trainer")
                        .WithMany("Educations")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Grooming", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Animal", "Animal")
                        .WithOne("Grooming")
                        .HasForeignKey("ForAnimalsWithLove.Data.Models.Grooming", "AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.HealthRecord", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Animal", "Animal")
                        .WithOne("HealthRecord")
                        .HasForeignKey("ForAnimalsWithLove.Data.Models.HealthRecord", "AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.HospitalRecord", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.HealthRecord", "HealthRecord")
                        .WithOne("HospitalRecord")
                        .HasForeignKey("ForAnimalsWithLove.Data.Models.HospitalRecord", "HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthRecord");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Operation", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Doctor", "Doctor")
                        .WithMany("Operations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ForAnimalsWithLove.Data.Models.HospitalRecord", "HospitalRecord")
                        .WithMany("Operations")
                        .HasForeignKey("HospitalRecordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HospitalRecord");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.SearchHome", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Animal", "Animal")
                        .WithOne("SearchHome")
                        .HasForeignKey("ForAnimalsWithLove.Data.Models.SearchHome", "AnimalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Test", b =>
                {
                    b.HasOne("ForAnimalsWithLove.Data.Models.Operation", null)
                        .WithMany("Tests")
                        .HasForeignKey("OperationId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Animal", b =>
                {
                    b.Navigation("Grooming");

                    b.Navigation("HealthRecord")
                        .IsRequired();

                    b.Navigation("SearchHome");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Direction", b =>
                {
                    b.Navigation("DirectionsDoctors");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Doctor", b =>
                {
                    b.Navigation("AnimalsDoctors");

                    b.Navigation("DirectionsDoctors");

                    b.Navigation("Operations");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.HealthRecord", b =>
                {
                    b.Navigation("HospitalRecord");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.HospitalRecord", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Operation", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Owner", b =>
                {
                    b.Navigation("MyAnimals");
                });

            modelBuilder.Entity("ForAnimalsWithLove.Data.Models.Trainer", b =>
                {
                    b.Navigation("Educations");
                });
#pragma warning restore 612, 618
        }
    }
}
